
g_flParent="${BASH_SOURCE[1]}"
g_fnCur=$(basename "${BASH_SOURCE[0]}")
g_dpCur=$(dirname  "${BASH_SOURCE[0]}")
drCur0=${PWD}
cd "${g_dpCur}" >/dev/null
g_dpCur=${PWD}
cd "${drCur0}" >/dev/null
g_pfnCur=${g_dpCur}/${g_fnCur}
export g_fn_pcie_test_common=${g_fnCur}
export g_dp_pcie_test_common=${g_dpCur}

#####################
#check load from command line
if [ -z "${g_flParent}" ]; then
    #if at the command line, support reload the source file
    #delete it first
    g_defSourceFiles=$(grep -vF "${g_pfnCur}" <<< "${g_defSourceFiles}")
    #bug: export g_defSourceFiles=${g_defSourceFiles}${g_pfnCur}$'\n'
    #will delete the end line \n
fi

#check loaded already
sPF1=$(grep -F "${g_pfnCur}" <<< "${g_defSourceFiles}")
if [ $? -eq 0 ]; then
    #then [ "${sPF1}" == "${g_pfnCur}" ]
    #path file name is only one in file system.
	return 100
fi

export g_defSourceFiles=${g_defSourceFiles}$'\n'${g_pfnCur}
printf "%s[%3d]%5s: Load [${g_pfnCur}] call by [${g_flParent}]\n" "${FUNCNAME[0]}" ${LINENO} "Info"

####################################################################################
#Load Public functions
drCur1=${g_dp_pcie_test_common}
fsrc1=funcs.common
flPub1=${drCur1}/${fsrc1}
if [ ! -f "${flPub1}" ]; then
    s1=$(find ${drCur1}/.. ${g_argFindMaxDepth} -type f -name "${fsrc1}")
    if [ -z "${s1}" ]; then
        printf "%s[%3d]%5s: Not found ${fsrc1}\n" "${FUNCNAME[0]}" ${LINENO} "Error" >&2
        exit 1
    fi
    flPub1=${s1}
fi
if [ -n "${flPub1}" ]; then
    $(sed "s#^#. #" <<< "${flPub1}")
fi

. ${g_dp_pcie_test_common}/../../config/common_config
. ${g_dp_pcie_test_common}/../../config/common_lib

#####################
#Load config
LoadSourceFileParent "${g_dp_pcie_test_common}" "${g_fn_pcie_test_common%_*}_config" flPath1 "${g_flLog}" true
$(sed "s#^#. #" <<< "${flPath1}")

LoadSourceFileParent "${g_dp_pcie_test_common}" "olmcim.cfg" flPath1 "${g_flLog}" true
$(sed "s#^#. #" <<< "${flPath1}")

#####################
#init
#export g_flList=$(sed "/^[ \t]*\$/d;/^[ \t]*#/d;s/^[ \t]\+//;s/[ \t]\+\$//" <<< "${g_flList}")

export g_flBaseLog=${g_drTmp}/${g_fn_pcie_test_common%_*}
if [ -d "${g_flBaseLog}_bak" ]; then
    rm -rf "${g_flBaseLog}_bak"
fi
mkdir -p "${g_flBaseLog}_bak"

export g_flLog=${g_flBaseLog}.log
sList=$(ls -d "${g_flBaseLog}".* 2>/dev/null)
if [ -n "${sList}" ]; then
    mv ${sList} "${g_flBaseLog}_bak"
fi

###########
export g_sLevelRun=$(sed "/^[ \t]*\$/d;/^[ \t]*#/d;s@^[ \t]\+@@;s@[ \t]\+\$@@" <<< "${g_sLevelRun}")
export g_sMsgCur=

#####################
#Alone Functions
ArgInCmdLine()
{
    local sKey1=${1}
    
    echo "Begin to run ArgInCmdLine "${sKey1}
    grep -q "\(^\| \)${sKey1}\( \|\$\)" /proc/cmdline
    if [ $? -ne 0 ]; then
        g_sMsgCur="not have ${sKey1} in cmdline"
        g_sHeadCurLine=$(printf "%s[%3d]%s[%3d]" "${FUNCNAME[1]}" "${BASH_LINENO[0]}" "${FUNCNAME[0]}" ${LINENO})
        OutLogHead 1 "" "${g_sHeadCurLine}" "${g_sMsgCur}" "${g_flLog}" false
        return 1
    fi
    echo "Finish ArgInCmdLine "${sKey1}" is success!"
}

LspcikKeysiBA()
{
    local sKey1=${1}
    local bIC=${2:-false}
    local nB=${3:-0}
    local nA=${4:-0}
   
    echo "Begin to run LspcikKeysiBA"${sKey1}  

    local argic
    argic=
    if [ "${bIC}" == "true" ]; then
        argic=-i
    fi
    lspci -k |grep ${argic} -B${nB} -A${nA} -q "${sKey1}"
    if [ $? -ne 0 ]; then
        g_sMsgCur="not have ${sKey1}"
        g_sHeadCurLine=$(printf "%s[%3d]%s[%3d]" "${FUNCNAME[1]}" "${BASH_LINENO[0]}" "${FUNCNAME[0]}" ${LINENO})
        echo "lspci cmd is not success in LspcikKeysiBA "${sKey1} 
        OutLogHead 1 "" "${g_sHeadCurLine}" "${g_sMsgCur}" "${g_flLog}" false
        return 1
    fi
    echo "Finish LspcikKeysiBA "${sKey1}" is success!"
}
export -f LspcikKeysiBA

DmesgCard2KeyBA()
{
    local sKey1=${1}
    local sKey2=${2}
    local nB=${3:-0}
    local nA=${4:-0}

    local bdfA
    bdfA=$(lspci -k |grep -i -B${nB} -A${nA} "${sKey1}" |grep -o "^[0-9A-Fa-f:.]\+")
    if [ -z "${bdfA}" ]; then
        g_sMsgCur="not have ${sKey1}"
        g_sHeadCurLine=$(printf "%s[%3d]%s[%3d]" "${FUNCNAME[1]}" "${BASH_LINENO[0]}" "${FUNCNAME[0]}" ${LINENO})
        OutLogHead 1 "" "${g_sHeadCurLine}" "${g_sMsgCur}" "${g_flLog}" false
        return 1
    fi

    bdf1=$(echo "${bdfA}" |sed -n '1p')
    dmesg |grep "${bdf1}" |grep -iq "${sKey2}"
    if [ $? -ne 0 ]; then
        g_sMsgCur="not have ${sKey2}"
        g_sHeadCurLine=$(printf "%s[%3d]%s[%3d]" "${FUNCNAME[1]}" "${BASH_LINENO[0]}" "${FUNCNAME[0]}" ${LINENO})
        OutLogHead 1 "" "${g_sHeadCurLine}" "${g_sMsgCur}" "${g_flLog}" false
        return 1
    fi
}

CheckCard2KeysBA()
{
    local sKey1=${1}
    local sKey2=${2}
    local nB=${3:-0}
    local nA=${4:-0}

    local bdfA
    bdfA=$(lspci -k |grep -i -B${nB} -A${nA} "${sKey1}" |grep -o "^[0-9A-Fa-f:.]\+")
    if [ -z "${bdfA}" ]; then
        g_sMsgCur="not have ${sKey1}"
        g_sHeadCurLine=$(printf "%s[%3d]%s[%3d]" "${FUNCNAME[1]}" "${BASH_LINENO[0]}" "${FUNCNAME[0]}" ${LINENO})
        OutLogHead 1 "" "${g_sHeadCurLine}" "${g_sMsgCur}" "${g_flLog}" false
        return 1
    fi

    bdf1=$(echo "${bdfA}" |sed -n '1p')
    lspci -s ${bdf1} -vvv |grep -q "${sKey2}"
    if [ $? -ne 0 ]; then
        g_sMsgCur="not have ${sKey2}"
        g_sHeadCurLine=$(printf "%s[%3d]%s[%3d]" "${FUNCNAME[1]}" "${BASH_LINENO[0]}" "${FUNCNAME[0]}" ${LINENO})
        OutLogHead 1 "" "${g_sHeadCurLine}" "${g_sMsgCur}" "${g_flLog}" false
        return 1
    fi
}
export -f CheckCard2KeysBA

DmesgCard2KeyBA()
{
    local sKey1=${1}
    local sKey2=${2}
    local nB=${3:-0}
    local nA=${4:-0}

    local bdfA
    bdfA=$(lspci -k |grep -i -B${nB} -A${nA} "${sKey1}" |grep -o "^[0-9A-Fa-f:.]\+")
    if [ -z "${bdfA}" ]; then
        g_sMsgCur="not have ${sKey1}"
        g_sHeadCurLine=$(printf "%s[%3d]%s[%3d]" "${FUNCNAME[1]}" "${BASH_LINENO[0]}" "${FUNCNAME[0]}" ${LINENO})
        OutLogHead 1 "" "${g_sHeadCurLine}" "${g_sMsgCur}" "${g_flLog}" false
        return 1
    fi

    bdf1=$(echo "${bdfA}" |sed -n '1p')
    dmesg |grep "${bdf1}" |grep -iq "${sKey2}"
    if [ $? -ne 0 ]; then
        g_sMsgCur="not have ${sKey2}"
        g_sHeadCurLine=$(printf "%s[%3d]%s[%3d]" "${FUNCNAME[1]}" "${BASH_LINENO[0]}" "${FUNCNAME[0]}" ${LINENO})
        OutLogHead 1 "" "${g_sHeadCurLine}" "${g_sMsgCur}" "${g_flLog}" false
        return 1
    fi
}
export -f DmesgCard2KeyBA

#条件:启动端(即服务端)为D03;
ImageReuse()
{
    verD05=$(uname -r)
    verD03=$(ssh root@${BACK_IP} 'uname -r')
    if [ "${verD05}" != "${verD03}" ]; then
        return 1
    fi
}

#ECAM support for non-RC devices
#dmesg |grep "ECAM"

##########
#Complex Functions
ACPICard()
{
    local sKey1=${1}
    local nB=${2:-0}
    local nA=${3:-0}

    local bdfA
    bdfA=$(lspci -k |grep -i -B${nB} -A${nA} "${sKey1}" |grep -o "^[0-9A-Fa-f:.]\+")
    if [ -z "${bdfA}" ]; then
        g_sMsgCur="not have ${sKey1}"
        g_sHeadCurLine=$(printf "%s[%3d]%s[%3d]" "${FUNCNAME[1]}" "${BASH_LINENO[0]}" "${FUNCNAME[0]}" ${LINENO})
        OutLogHead 1 "" "${g_sHeadCurLine}" "${g_sMsgCur}" "${g_flLog}" false
        return 1
    fi

    ArgInCmdLine "acpi=force"
}
export -f ACPICard

#####################
#init2
g_flTCsTable=$(basename "${g_flTCsTable}")
LoadSourceFileParent "${g_dp_pcie_test_common}" "${g_flTCsTable}" g_flTCsTable "${g_flLog}" true

#####################

